{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.es6.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Default configs.\n */\nconst DEFAULT_DELIMITER = '/'\nconst DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nconst PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nconst parse = (str, options) => {\n  const tokens = []\n  let key = 0\n  let index = 0\n  let path = ''\n  const defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  const delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  let pathEscaped = false\n  let res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    const m = res[0]\n    const escaped = res[1]\n    const offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    let prev = ''\n    const next = str[index]\n    const name = res[2]\n    const capture = res[3]\n    const group = res[4]\n    const modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      const k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    const partial = prev !== '' && next !== undefined && next !== prev\n    const repeat = modifier === '+' || modifier === '*'\n    const optional = modifier === '?' || modifier === '*'\n    const delimiter = prev || defaultDelimiter\n    const pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nconst compile = (str, options) => tokensToFunction(parse(str, options))\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nconst tokensToFunction = (tokens) => {\n  // Compile all the tokens into regexps.\n  const matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (let i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return (data, options) => {\n    let path = ''\n    const encode = (options && options.encode) || encodeURIComponent\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      const value = data ? data[token.name] : undefined\n      let segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nconst escapeString = str => str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nconst escapeGroup = group => group.replace(/([=!:$/()])/g, '\\\\$1')\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nconst flags = options => options && options.sensitive ? '' : 'i'\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nconst regexpToRegexp = (path, keys) => {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  const groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nconst arrayToRegexp = (path, keys, options) => {\n  const parts = []\n\n  for (let i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nconst stringToRegexp = (path, keys, options) => tokensToRegExp(parse(path, options), keys, options)\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nconst tokensToRegExp = (tokens, keys, options) => {\n  options = options || {}\n\n  const strict = options.strict\n  const end = options.end !== false\n  const delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  const delimiters = options.delimiters || DEFAULT_DELIMITERS\n  const endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  let route = ''\n  let isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      const prefix = escapeString(token.prefix)\n      const capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nconst pathToRegexp = (path, keys, options) => {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n\n/**\n * Expose `pathToRegexp`.\n */\nexport default pathToRegexp\n\nexport {\n  parse,\n  compile,\n  tokensToFunction,\n  tokensToRegExp\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = Object.assign({}, parentParams)\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nexport default resolveRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\nimport resolveRoute from './resolveRoute'\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = Object.assign({ router: this }, options.context)\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    )\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Page not found')\n        error.context = context\n        error.code = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = Object.assign({}, context, matches.value)\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        error.context = error.context || currentContext\n        error.code = error.code || 500\n        if (this.errorHandler) {\n          return this.errorHandler(error)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n"],"names":["PATH_REGEXP","RegExp","join","escapeString","str","replace","escapeGroup","group","flags","options","sensitive","arrayToRegexp","path","keys","parts","i","length","push","pathToRegexp","source","stringToRegexp","tokensToRegExp","res","tokens","key","index","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","m","escaped","offset","slice","prev","next","name","capture","modifier","k","indexOf","partial","undefined","repeat","optional","pattern","substr","parse","strict","end","endsWith","concat","map","route","isEndDelimited","token","prefix","groups","match","regexpToRegexp","Array","isArray","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchRoute","baseUrl","pathname","parentKeys","parentParams","childMatches","childIndex","routeToSkip","children","cacheKey","regexp","get","set","params","assign","prop","value","call","split","charAt","matchPath","childRoute","parent","childMatch","done","resolveRoute","context","action","UniversalRouter","routes","TypeError","errorHandler","this","root","resolve","pathnameOrContext","matches","nextMatches","currentContext","resume","prevResult","parentRoute","isChildRoute","Promise","error","Error","code","reject","then","result","_this","catch"],"mappings":"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"}