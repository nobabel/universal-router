{"version":3,"file":"universal-router.js","sources":["../node_modules/path-to-regexp/index.es6.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Default configs.\n */\nconst DEFAULT_DELIMITER = '/'\nconst DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nconst PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nconst parse = (str, options) => {\n  const tokens = []\n  let key = 0\n  let index = 0\n  let path = ''\n  const defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  const delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  let pathEscaped = false\n  let res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    const m = res[0]\n    const escaped = res[1]\n    const offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    let prev = ''\n    const next = str[index]\n    const name = res[2]\n    const capture = res[3]\n    const group = res[4]\n    const modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      const k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    const partial = prev !== '' && next !== undefined && next !== prev\n    const repeat = modifier === '+' || modifier === '*'\n    const optional = modifier === '?' || modifier === '*'\n    const delimiter = prev || defaultDelimiter\n    const pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nconst compile = (str, options) => tokensToFunction(parse(str, options))\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nconst tokensToFunction = (tokens) => {\n  // Compile all the tokens into regexps.\n  const matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (let i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return (data, options) => {\n    let path = ''\n    const encode = (options && options.encode) || encodeURIComponent\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      const value = data ? data[token.name] : undefined\n      let segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nconst escapeString = str => str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nconst escapeGroup = group => group.replace(/([=!:$/()])/g, '\\\\$1')\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nconst flags = options => options && options.sensitive ? '' : 'i'\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nconst regexpToRegexp = (path, keys) => {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  const groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nconst arrayToRegexp = (path, keys, options) => {\n  const parts = []\n\n  for (let i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nconst stringToRegexp = (path, keys, options) => tokensToRegExp(parse(path, options), keys, options)\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nconst tokensToRegExp = (tokens, keys, options) => {\n  options = options || {}\n\n  const strict = options.strict\n  const end = options.end !== false\n  const delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  const delimiters = options.delimiters || DEFAULT_DELIMITERS\n  const endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  let route = ''\n  let isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      const prefix = escapeString(token.prefix)\n      const capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nconst pathToRegexp = (path, keys, options) => {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n\n/**\n * Expose `pathToRegexp`.\n */\nexport default pathToRegexp\n\nexport {\n  parse,\n  compile,\n  tokensToFunction,\n  tokensToRegExp\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = Object.assign({}, parentParams)\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nexport default resolveRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\nimport resolveRoute from './resolveRoute'\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = Object.assign({ router: this }, options.context)\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    )\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Page not found')\n        error.context = context\n        error.code = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = Object.assign({}, context, matches.value)\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        error.context = error.context || currentContext\n        error.code = error.code || 500\n        if (this.errorHandler) {\n          return this.errorHandler(error)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n"],"names":["DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","parse","str","options","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","res","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","replace","flags","sensitive","regexpToRegexp","keys","groups","source","match","i","arrayToRegexp","parts","pathToRegexp","stringToRegexp","tokensToRegExp","strict","end","endsWith","concat","map","route","isEndDelimited","token","Array","isArray","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchPath","pathname","parentKeys","parentParams","children","cacheKey","regexp","get","set","params","assign","prop","value","call","split","charAt","matchRoute","baseUrl","childMatches","childIndex","routeToSkip","done","childRoute","parent","childMatch","resolveRoute","context","action","isChildRoute","parentRoute","UniversalRouter","routes","TypeError","errorHandler","router","root","resolve","pathnameOrContext","matches","nextMatches","currentContext","resume","prevResult","Promise","error","Error","code","reject","then","result","catch"],"mappings":"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"}